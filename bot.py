# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L7dsc57Vxj3XGNHc3kETTcIqhiF72_fF
"""


import requests
from bs4 import BeautifulSoup
import telebot
from telebot import types
import sqlite3
import pandas as pd
from bob_telegram_tools.bot import TelegramBot
import re
from fear_greed_index.CNNFearAndGreedIndex import CNNFearAndGreedIndex
from matplotlib import pyplot as plt
from datetime import datetime
import lxml
import json
from bs4 import BeautifulSoup
from flask import Flask, request
import os

API_KEY = '5186235987:AAEEvnAOrxYATmUf0fXDNCb7b2Z3jEVXMSc'
TOKEN = '5186235987:AAEEvnAOrxYATmUf0fXDNCb7b2Z3jEVXMSc'
bot = telebot.TeleBot(API_KEY)
cnn_fg = CNNFearAndGreedIndex()
server = Flask(__name__)


@bot.message_handler(commands=['start',"Start","START"])
def send_welcome(message):
	bot.reply_to(message, "Hello, IWantFA_bot is here to help you paraphrase your texts. \nUse /menu to navigate \nUse /help to seek help \nYou are welcome :)")

@bot.message_handler(commands=['fear_index'])
def send_welcome(message):
  text = cnn_fg.get_complete_report()
  head, sep, tail = text.partition('1 Year Ago')
  bot.send_message(message.chat.id,"Updated on "+ datetime.today().strftime('%Y-%m-%d')+" :" + "\n  "+head)
  fig = plt.figure(figsize=(30, 15))
  cnn_fg.plot_all_charts(fig)
  TelegramBot(API_KEY, message.chat.id).send_plot(plt)

@bot.message_handler(commands=['market_news'])
def send_welcome(message):
  x =1
  for each in yahoo_get_top_news_data():
    if x<4:
      bot.send_message(message.chat.id,"News article Number: " +str(x) + "\n\n" + each)
      x +=1

def yahoo_get_top_news_data():
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                      "(KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582"
    }

    html = requests.get('https://finance.yahoo.com/', headers=headers)
    soup = BeautifulSoup(html.text, 'lxml')

    all_script_tags = soup.select('script')
    matched_string = ''.join(re.findall(r'root\.App\.main = (.*);\n+}\(this\)\);\n+</script>', str(all_script_tags)))
    matched_string_json = json.loads(matched_string)

    matched_string_json_stream = matched_string_json['context']['dispatcher']['stores']['ThreeAmigosStore']['data']['ntk']['stream']
    list1 = []
    for top_news_result_index, top_news in enumerate(matched_string_json_stream):
        teaser = top_news['editorialContent']['teaser']
        title = top_news['editorialContent']['title']

        try:
            source = top_news['editorialContent']['content']['provider']['displayName']
        except:
            source = None

        try:
            source_site_link = top_news['editorialContent']['content']['provider']['url']
        except:
            source_site_link = None

        try:
            canonical_url = top_news['editorialContent']['content']['canonicalUrl']['url']
        except:
            canonical_url = None

        try:
            canonical_url_website = top_news['editorialContent']['content']['canonicalUrl']['site']
        except:
            canonical_url_website = None

        try:
            click_through_url = top_news['editorialContent']['content']['clickThroughUrl']['url']
        except:
            click_through_url = None

        try:
            click_through_url_website = top_news['editorialContent']['content']['clickThroughUrl']['site']
        except:
            click_through_url_website = None


        list1.append(
              f'Teaser: {teaser}\n\n'
              f'Title: {title}\n\n'
              f'Source: {source}\n\n'
              f'Click through URL: {click_through_url}\n')

    return list1

@bot.message_handler(commands=['price_change'])
def pp2(message):
  sent = bot.send_message(message.chat.id, 'Give me your stock')
  bot.register_next_step_handler(sent, get_stock_price_action)

def get_stock_price_action(message):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                      "(KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582"
    }

    symbols = message.text.upper()
    params = {
        'formatted': "true",
        'crumb': 'FI5oDlMl7HO',
        'lang': 'en-US',
        'region': 'US',
        'symbols': symbols,
        'fields': 'symbol,shortName,longName,regularMarketPrice,regularMarketChange,regularMarketChangePercent',
        'corsDomain': 'finance.yahoo.com'
    }
    yahoo_urls = requests.get('https://query2.finance.yahoo.com/v7/finance/quote', params = params, headers = headers).text
    for right_side_stock_result in json.loads(yahoo_urls)['quoteResponse']['result']:
        stock_symbol = right_side_stock_result['symbol']
        short_name = right_side_stock_result['shortName']
        region = right_side_stock_result['region']
        regular_market_time = right_side_stock_result['regularMarketTime']['fmt']
        exchange_time_zone_name = right_side_stock_result['exchangeTimezoneName']
        market_state = right_side_stock_result['marketState']
        quote_type = right_side_stock_result['quoteType']

        try:
            quote_source_name = right_side_stock_result['quoteSourceName']
        except:
            quote_source_name = None

        market = right_side_stock_result['market']
        regular_market_price = right_side_stock_result['regularMarketPrice']['fmt']
        regular_market_change = right_side_stock_result['regularMarketChange']['fmt']
        regular_market_change_percent = right_side_stock_result['regularMarketChangePercent']['fmt']

        bot.send_message(message.chat.id,f'Source: {quote_source_name}\n'
              f'Symbol: {stock_symbol}\n'
              f'Name: {short_name}\n'
              f'Regular market time: {regular_market_time}\n'
              f'Market: {market}\n'
              f'Market state: {market_state}\n'
              f'Market price: {regular_market_price}\n'
              f'Price change: {regular_market_change}\n'
              f'Price % change: {regular_market_change_percent}\n')
        bot.send_message(message.chat.id,"Press /price_change for a different stock or /menu to go to menu")

@bot.message_handler(commands=['stock'])
def pp(message):
  sent = bot.send_message(message.chat.id, 'Give me your stock')
  bot.register_next_step_handler(sent, getstock)


def getstock(message):
    # create url
    tens = dict(K=10e3, M=10e6, B=10e9)
    stockname = message.text.upper()
    url = 'https://sg.finance.yahoo.com/quote/'+stockname+'/key-statistics?'
    url2 = 'https://sg.finance.yahoo.com/quote/'+stockname+'/analysis?'
    url3= 'https://www.gurufocus.com/term/iv_dcf/'+stockname+'/Intrinsic-Value:-DCF-(FCF-Based)/'
    # define headers
    headers = { 'User-Agent': 'Generic user agent' }
      # get page
    page = requests.get(url, headers=headers)
    page2 = requests.get(url2, headers=headers)
    page3 = requests.get(url3, headers=headers)
    # let's soup the page
    soup = BeautifulSoup(page.text, 'html.parser')
    soup2 = BeautifulSoup(page2.text, 'html.parser')
    soup3 = BeautifulSoup(page3.text, 'html.parser')
    cf = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[59].text
    if cf != 'N/A':
      bot.send_message(message.chat.id,"Using DCF model to calculate intrinsic value...")
    else:
      bot.send_message(message.chat.id,"Negative cashflow comapny. Using EV model to calculate intrinsic value...")
    try:
        try:
            # get company name
            company_name = soup.find('h1', {'class': 'D(ib) Fz(18px)'}).text
        except:
            print('Name not found!')
        try:
            # get price
            price = soup.find('fin-streamer', {'class': 'Fw(b) Fz(36px) Mb(-4px) D(ib)'}).text
            price = price.replace(',',"")
        except:
            print('Price not found!')
        try:
            # get p/e
            pe = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[3].text
        except:
            print('P/e not found!')
        try:
            # get p/s
            ps = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[5].text
        except:
            print('P/s not found!')
        try:
            # get e/v
            ev = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[7].text   #7
        except:
            print('P/s not found!')
        try:
            # get cf
            cf = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[59].text
        except:
            print('Cash flow not found!')
        try:
            # get shareoustanding
            shareout = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[18].text
            factor, exp = shareout[0:-1], shareout[-1].upper()
            shareout = int(float(factor) * tens[exp])
        except:
            print('shareout not found!')
        try:
            # get growth
            growth = soup2.find_all('td', {'class': "Ta(end) Py(10px)"})[16].text
        except:
            print('Cash flow not found!')
        try:
            # get rev growth
            revgrowth = soup2.find_all('td', {'class': "Ta(end)"})[43].text
            revgrowth = float(revgrowth.strip('%'))/100
        except:
            print('rev growth not found!')
        try:
            # get disc
            discount = soup3.find_all('p', {'class': "term_cal"})[1].text
            discount = discount[22:25]
            discount2 = re.sub('%', '', discount)
            discount2 = float(discount2)/100
        except:
            print('Discount not found!')
        try:
            # get value
            intrinsic = soup3.find_all('font', {'style': "font-size: 24px; font-weight: 700; color: #337ab7"})[0].text
            intrinsic = intrinsic.replace(':',"")
            intrinsic = intrinsic.replace(',',"")
            intrinsic = intrinsic.replace('(As of Today)',"")
            intrinsicnumber = float(intrinsic.replace('$',""))
        except:
            print('intrinsic value not found!')
        try:
            # get  revenue
            revenue = soup.find_all('td', {'class': 'Fw(500) Ta(end) Pstart(10px) Miw(60px)'})[44].text
            factor, exp = revenue[0:-1], revenue[-1].upper()
            revenue2 = int(float(factor) * tens[exp])
            rev = round(((((revenue2*(1+revgrowth))*float(ev))*1)/(1+discount2))/shareout,2)
        except:
            print('revenue not found!')

        if cf == "N/A":
                  bot.send_message(message.chat.id, "Company Name: "+ company_name+ "\nCurrent Price: $"+ price + "\nForward P/E: "+pe + "\nP/S (TTM): "+ps + "\nEnterprise Value Ratio: "+ev +"\nLevered Cash Flow: "+cf+"\nForward Growth: "+growth + "\nWACC: "+ discount
                         + "\nIntrinsic Value: "+"$"+ str(rev)+ " (As of Today)")
        else:
                  bot.send_message(message.chat.id, "Company Name: "+ company_name+ "\nCurrent Price: $"+ price + "\nForward P/E: "+pe + "\nP/S (TTM): "+ps + "\nEnterprise Value Ratio: "+ev +"\nLevered Cash Flow: "+cf+"\nForward Growth: "+growth + "\nWACC: "+ discount
                         + "\nIntrinsic Value:"+ intrinsic + " (As of Today)")
        if cf != "N/A" and intrinsicnumber < float(price):
          bot.send_message(message.chat.id,"Signal: SELL\nPotential downside: "+str(-round(((float(price)-intrinsicnumber)/float(price))*100,2))+"%")
        elif cf == 'N/A' and rev < float(price):
           bot.send_message(message.chat.id,"Signal: SELL\nPotential downside: "+str(-round(((float(price)-rev)/float(price))*100,2))+"%")
        elif cf =='N/A' and rev >= float(price):
           bot.send_message(message.chat.id,"Signal: BUY\nPotential upside: "+str(round(((rev-float(price))/float(price))*100,2))+"%")
        elif cf != "N/A" and intrinsicnumber >= float(price):
          bot.send_message(message.chat.id,"Signal: BUY\nPotential upside: "+str(round(((intrinsicnumber - float(price))/float(price))*100,2))+"%")
        bot.send_message(message.chat.id,"Press /stock for a different stock or /menu to go to menu")

    except Exception as e:
        print(e)

print("Started")


@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://stockbot97.herokuapp.com/' + TOKEN)
    return "!", 200


if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))

